{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Saposs Saposs(abbr. Simple As POSSible ) was given birth to make the software development better and easier than before. Saposs Products Saposs WF(for Windows Forms). How does Saposs work? Basically, the software or application is made from a set of various modules. That's why Saposs addressed into each software module. Saposs relied on a very simple concept which separates each software module into 3 parts: view, handler and service. View can be Forms, User Controls, etc... In the meantime, Handler is responsible for handling the business logics. And finally, Service represents as a set of utilities, helpers as well as function APIs. Why using Saposs? Without Saposs, you have to create all software components that will depend on much more together. That's why Saposs WF was given birth to solve this problem. This idea is to support for plugging in and -out all software components easily without affecting any others. It will be getting easier to maintain and also save much money for you. Bugs or Issues If any problem is found, please report any bug or issue to Saposs Issues . We always appreciate your contributions. Thanks a lot :) Copyright and License \u00a9 Copyright 2019 by Saposs. All rights reserved.","title":"Welcome to Saposs"},{"location":"#welcome-to-saposs","text":"Saposs(abbr. Simple As POSSible ) was given birth to make the software development better and easier than before.","title":"Welcome to Saposs"},{"location":"#saposs-products","text":"Saposs WF(for Windows Forms).","title":"Saposs Products"},{"location":"#how-does-saposs-work","text":"Basically, the software or application is made from a set of various modules. That's why Saposs addressed into each software module. Saposs relied on a very simple concept which separates each software module into 3 parts: view, handler and service. View can be Forms, User Controls, etc... In the meantime, Handler is responsible for handling the business logics. And finally, Service represents as a set of utilities, helpers as well as function APIs.","title":"How does Saposs work?"},{"location":"#why-using-saposs","text":"Without Saposs, you have to create all software components that will depend on much more together. That's why Saposs WF was given birth to solve this problem. This idea is to support for plugging in and -out all software components easily without affecting any others. It will be getting easier to maintain and also save much money for you.","title":"Why using Saposs?"},{"location":"#bugs-or-issues","text":"If any problem is found, please report any bug or issue to Saposs Issues . We always appreciate your contributions. Thanks a lot :)","title":"Bugs or Issues"},{"location":"#copyright-and-license","text":"\u00a9 Copyright 2019 by Saposs. All rights reserved.","title":"Copyright and License"},{"location":"about/","text":"About This is the online documentation for Saposs and Saposs WF. Document Version 1.0.0","title":"About Documentation"},{"location":"about/#about","text":"This is the online documentation for Saposs and Saposs WF. Document Version 1.0.0","title":"About"},{"location":"connect-v-h-s-saposs-wf/","text":"Connect View-Handler-Service Saposs offers you a set of APIs to connect between view, handler and service together. The following is details about them: API Function Return Value Description Utils.ExecuteView object(Form or User Control, etc...) Execute a view from a specific view name/id. Utils.ExecuteHandler N/A Execute a handler from a specific handler name/id. Utils.ExecuteService object Execute a service from a specific service name/id. For instance: Connect to an existing view: // Your view name comes from Name property when implementing IView. var view = Utils . ExecuteView ( \"[YOUR_VIEW_NAME]\" ); Connect to an existing handler: // Your handler name comes from Name property when implementing IHandler. Utils . ExecuteHandler ( \"[YOUR_HANDLER_NAME]\" ); Connect to an existing service: // Your service name comes from Name property when implementing IService. var result = Utils . ExecuteService ( \"[YOUR_SERVICE_NAME]\" );","title":"Connect View-Handler-Service"},{"location":"connect-v-h-s-saposs-wf/#connect-view-handler-service","text":"Saposs offers you a set of APIs to connect between view, handler and service together. The following is details about them: API Function Return Value Description Utils.ExecuteView object(Form or User Control, etc...) Execute a view from a specific view name/id. Utils.ExecuteHandler N/A Execute a handler from a specific handler name/id. Utils.ExecuteService object Execute a service from a specific service name/id. For instance: Connect to an existing view: // Your view name comes from Name property when implementing IView. var view = Utils . ExecuteView ( \"[YOUR_VIEW_NAME]\" ); Connect to an existing handler: // Your handler name comes from Name property when implementing IHandler. Utils . ExecuteHandler ( \"[YOUR_HANDLER_NAME]\" ); Connect to an existing service: // Your service name comes from Name property when implementing IService. var result = Utils . ExecuteService ( \"[YOUR_SERVICE_NAME]\" );","title":"Connect View-Handler-Service"},{"location":"create-a-handler-saposs-wf/","text":"Create a new Handler First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new handler, you need to create a new class which implements IHandler. The following is sample code: [Export(typeof(IHandler))] public class Handler : IHandler { public string Name => \"YourApp.Handlers.NewHandler\" ; public string Title => \"New Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public void Execute () { // TODO: write code here... } }","title":"Create a new Handler"},{"location":"create-a-handler-saposs-wf/#create-a-new-handler","text":"First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new handler, you need to create a new class which implements IHandler. The following is sample code: [Export(typeof(IHandler))] public class Handler : IHandler { public string Name => \"YourApp.Handlers.NewHandler\" ; public string Title => \"New Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public void Execute () { // TODO: write code here... } }","title":"Create a new Handler"},{"location":"create-a-service-saposs-wf/","text":"Create a new Service First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new service, you need to create a new class which implements IService. The following is sample code: [Export(typeof(IService))] public class Service : IService { public string Name => \"YourApp.Services.NewService\" ; public string Title => \"New service\" ; public string Description => \"This is a new service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 3 ; public List < string > Dependencies => new List < string >(); public object Execute ( params object [] objs ) { return 1 ; } }","title":"Create a new Service"},{"location":"create-a-service-saposs-wf/#create-a-new-service","text":"First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new service, you need to create a new class which implements IService. The following is sample code: [Export(typeof(IService))] public class Service : IService { public string Name => \"YourApp.Services.NewService\" ; public string Title => \"New service\" ; public string Description => \"This is a new service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 3 ; public List < string > Dependencies => new List < string >(); public object Execute ( params object [] objs ) { return 1 ; } }","title":"Create a new Service"},{"location":"create-a-view-saposs-wf/","text":"Create a new View There are four kinds of following views in Saposs WF: Root View. Administrator View. End-User View. Normal View. First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new view, you need to create a new class which implements IView. Root View Root View is also called Start View. This view will be shown for the first time at the startup time. It is simple to create this view. The following is sample code: [Export(typeof(IView))] public class EntryView : IView { private EntryForm form = new EntryForm (); public bool IsDefault => false ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Entry View\" ; public string Description => \"This is a entry view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EntryView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to true and IsDefault was set to false, this view will be called \"Entry View\". As above sample, we assume that \"EntryForm\" form was created in your view. Administrator View Administrator View will be shown, after end-users clicked on the button \"Go to Admin Page\". The following is sample code to create this view: [Export(typeof(IView))] public class AdminView : IView { private AdminForm form = new AdminForm (); public bool IsDefault => true ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Admin View\" ; public string Description => \"This is a admin view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.AdminView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to true and IsDefault was set to true, this view will be called \"Administrator View\". As above sample, we assume that \"AdminForm\" form was created in your view. End-User View End-User View will be shown, after end-users clicked on the button \"Go to Development Page\". The following is sample code to create this view: [Export(typeof(IView))] public class EndUserView : IView { private EndUserForm form = new EndUserForm (); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"End-User View\" ; public string Description => \"This is a end-user view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EndUserView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to false and IsDefault was set to true, this view will be called \"End-User View\". As above sample, we assume that \"EndUserForm\" form was created in your view. Normal View Normal View will be called using Saposs APIs. The following is sample code to create this view: [Export(typeof(IView))] public class NormalView : IView { private NormalForm form = new NormalForm (); public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Normal View\" ; public string Description => \"This is a normal view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.NormalView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to false and IsDefault was set to false, this view will be called \"Normal View\". As above sample, we assume that \"NormalForm\" form was created in your view.","title":"Create a new View"},{"location":"create-a-view-saposs-wf/#create-a-new-view","text":"There are four kinds of following views in Saposs WF: Root View. Administrator View. End-User View. Normal View. First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new view, you need to create a new class which implements IView.","title":"Create a new View"},{"location":"create-a-view-saposs-wf/#root-view","text":"Root View is also called Start View. This view will be shown for the first time at the startup time. It is simple to create this view. The following is sample code: [Export(typeof(IView))] public class EntryView : IView { private EntryForm form = new EntryForm (); public bool IsDefault => false ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Entry View\" ; public string Description => \"This is a entry view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EntryView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to true and IsDefault was set to false, this view will be called \"Entry View\". As above sample, we assume that \"EntryForm\" form was created in your view.","title":"Root View"},{"location":"create-a-view-saposs-wf/#administrator-view","text":"Administrator View will be shown, after end-users clicked on the button \"Go to Admin Page\". The following is sample code to create this view: [Export(typeof(IView))] public class AdminView : IView { private AdminForm form = new AdminForm (); public bool IsDefault => true ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Admin View\" ; public string Description => \"This is a admin view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.AdminView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to true and IsDefault was set to true, this view will be called \"Administrator View\". As above sample, we assume that \"AdminForm\" form was created in your view.","title":"Administrator View"},{"location":"create-a-view-saposs-wf/#end-user-view","text":"End-User View will be shown, after end-users clicked on the button \"Go to Development Page\". The following is sample code to create this view: [Export(typeof(IView))] public class EndUserView : IView { private EndUserForm form = new EndUserForm (); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"End-User View\" ; public string Description => \"This is a end-user view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EndUserView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to false and IsDefault was set to true, this view will be called \"End-User View\". As above sample, we assume that \"EndUserForm\" form was created in your view.","title":"End-User View"},{"location":"create-a-view-saposs-wf/#normal-view","text":"Normal View will be called using Saposs APIs. The following is sample code to create this view: [Export(typeof(IView))] public class NormalView : IView { private NormalForm form = new NormalForm (); public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Normal View\" ; public string Description => \"This is a normal view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.NormalView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } When IsAdmin was set to false and IsDefault was set to false, this view will be called \"Normal View\". As above sample, we assume that \"NormalForm\" form was created in your view.","title":"Normal View"},{"location":"intro-saposs-wf/","text":"Introduce Saposs WF Saposs WF is a Windows desktop application which was built on Saposs Framework. It assists you to create any desktop application which will become easier to maintain. Why using Saposs WF? Saposs WF provides you a friendly UI to manage all components. Additionally, you're able to configure the settings. How does Saposs WF work? Saposs WF separated an application into 2 parts: administrator part and development part. For administrator part, this part is for any developer or programmer. There, you can manage all components and configure any setting. For development part, this part is for end-users. That means that they can see the result of your software. After everything is completed, you can hide the administrator part per UI so that the end-users are able to see the end result. Install Saposs WF In order to install Saposs WF, please follow the following requirements: Make sure that your computer has installed .NET Framework 4.0 or higher. Download Saposs WF from here. Unzip/unrar the downloaded source. Open the Saposs WF program by double-clicking on the executable file Saposs.Apps.WFApp . Completed. Congratulations, from now, you can get started to use Saposs WF :)","title":"Introduce to Saposs WF"},{"location":"intro-saposs-wf/#introduce-saposs-wf","text":"Saposs WF is a Windows desktop application which was built on Saposs Framework. It assists you to create any desktop application which will become easier to maintain.","title":"Introduce Saposs WF"},{"location":"intro-saposs-wf/#why-using-saposs-wf","text":"Saposs WF provides you a friendly UI to manage all components. Additionally, you're able to configure the settings.","title":"Why using Saposs WF?"},{"location":"intro-saposs-wf/#how-does-saposs-wf-work","text":"Saposs WF separated an application into 2 parts: administrator part and development part. For administrator part, this part is for any developer or programmer. There, you can manage all components and configure any setting. For development part, this part is for end-users. That means that they can see the result of your software. After everything is completed, you can hide the administrator part per UI so that the end-users are able to see the end result.","title":"How does Saposs WF work?"},{"location":"intro-saposs-wf/#install-saposs-wf","text":"In order to install Saposs WF, please follow the following requirements: Make sure that your computer has installed .NET Framework 4.0 or higher. Download Saposs WF from here. Unzip/unrar the downloaded source. Open the Saposs WF program by double-clicking on the executable file Saposs.Apps.WFApp . Completed. Congratulations, from now, you can get started to use Saposs WF :)","title":"Install Saposs WF"},{"location":"quick-tour-saposs-wf/","text":"Quick Tour Saposs WF offers you three simple pages/forms to use: Start Page. Administrator Page. Default Page. Start Page Here you can navigate to the administrator page or default page as screenshot. Administrator Page Here you're able to manage all software components and configure settings as screenshot. Default Page Here is a default page which will be shown to end-users. You can update this page later.","title":"Quick Tour"},{"location":"quick-tour-saposs-wf/#quick-tour","text":"Saposs WF offers you three simple pages/forms to use: Start Page. Administrator Page. Default Page.","title":"Quick Tour"},{"location":"quick-tour-saposs-wf/#start-page","text":"Here you can navigate to the administrator page or default page as screenshot.","title":"Start Page"},{"location":"quick-tour-saposs-wf/#administrator-page","text":"Here you're able to manage all software components and configure settings as screenshot.","title":"Administrator Page"},{"location":"quick-tour-saposs-wf/#default-page","text":"Here is a default page which will be shown to end-users. You can update this page later.","title":"Default Page"},{"location":"upload-component-saposs-wf/","text":"Upload Component In case a component is unknown in the administrator page, you're able to upload your completed components steps by steps as follows: Make sure that your component is finished. Please zip your component. Open Saposs WF. Click the button \"Go to admin page\". Choose the tab \"Add new component\". Click the button \"Upload\". Choose the compressed component file. If everything is good, you will receive a message as screenshot. Otherwise, please try again. Additionally, by default, Saposs WF doesn't support for updating an existing component directly due to a couple of internal factors. Maybe it would be supported in the near future. In order to do that, at first, please delete an existing component which you would like to update. After that, Saposs WF will be restarted to reflect any changes. Finally, you follow steps by steps as above to upload the new version of your component again. In order to delete an existing component, please follow the following requirements: Make sure that your Saposs WF is running. Go to the tab \"Components\". Choose an existing component. Click the button \"Delete\" as screenshot. `` A dialog will be shown to warn you about deleting an existing component. Click the button \"yes\" to continue. Your Saposs WF will be restarted to proceed to delete it. Completed.","title":"Upload Component"},{"location":"upload-component-saposs-wf/#upload-component","text":"In case a component is unknown in the administrator page, you're able to upload your completed components steps by steps as follows: Make sure that your component is finished. Please zip your component. Open Saposs WF. Click the button \"Go to admin page\". Choose the tab \"Add new component\". Click the button \"Upload\". Choose the compressed component file. If everything is good, you will receive a message as screenshot. Otherwise, please try again. Additionally, by default, Saposs WF doesn't support for updating an existing component directly due to a couple of internal factors. Maybe it would be supported in the near future. In order to do that, at first, please delete an existing component which you would like to update. After that, Saposs WF will be restarted to reflect any changes. Finally, you follow steps by steps as above to upload the new version of your component again. In order to delete an existing component, please follow the following requirements: Make sure that your Saposs WF is running. Go to the tab \"Components\". Choose an existing component. Click the button \"Delete\" as screenshot. `` A dialog will be shown to warn you about deleting an existing component. Click the button \"yes\" to continue. Your Saposs WF will be restarted to proceed to delete it. Completed.","title":"Upload Component"},{"location":"what-is-saposs-wf-component/","text":"What is Saposs WF component? As known, the software or application is made from a set of all modules. In Saposs, each module is made from components such as view, handlers and services. All Saposs components can be connected by using Saposs APIs. View: user control or forms, etc... Handler: business logics or code-behind. Service: a set of .NET APIs(e.g. helpers, utilities...). View In order to create a view, please follow the requirements steps by steps: Download the project template for view here . Follow to create a new view here . Handler In order to create a handler, please follow the requirements steps by steps: Download the project template for handler here . Follow to create a new handler here . Service In order to create a service, please follow the requirements steps by steps: Download the project template for service here . Follow to create a new service here .","title":"What is Saposs WF Component?"},{"location":"what-is-saposs-wf-component/#what-is-saposs-wf-component","text":"As known, the software or application is made from a set of all modules. In Saposs, each module is made from components such as view, handlers and services. All Saposs components can be connected by using Saposs APIs. View: user control or forms, etc... Handler: business logics or code-behind. Service: a set of .NET APIs(e.g. helpers, utilities...).","title":"What is Saposs WF component?"},{"location":"what-is-saposs-wf-component/#view","text":"In order to create a view, please follow the requirements steps by steps: Download the project template for view here . Follow to create a new view here .","title":"View"},{"location":"what-is-saposs-wf-component/#handler","text":"In order to create a handler, please follow the requirements steps by steps: Download the project template for handler here . Follow to create a new handler here .","title":"Handler"},{"location":"what-is-saposs-wf-component/#service","text":"In order to create a service, please follow the requirements steps by steps: Download the project template for service here . Follow to create a new service here .","title":"Service"}]}