{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Saposs Saposs(abbr. `Simple As POSSible`) was given birth to make the software development better and easier. Saposs changes the way to build either software or application which all independent assembly components will be consolidated into. Saposs Products Saposs WF(for Windows Forms). Saposs Aquarium(for ASP.NET MVC). How does Saposs work? Basically, the software or application is made from a set of various modules. That's why Saposs addressed into each software module. Saposs relied on a very simple concept which separates each software module into 3 parts: view, handler and service. View can be Forms, User Controls, etc... In the meantime, Handler is responsible for handling the business logics. And finally, Service represents as a set of utilities, helpers as well as function APIs. At the behind of the stage, Saposs will help you to connect between them indirectly. Why using Saposs? Without Saposs, you have to create all software components that will depend on much more together. From day to day, its size will get bigger and difficult to maintain. Also, it costs much money for doing that. That's why Saposs was given birth to solve this problem. Our idea is to support for plugging in and -out all software components easily without affecting any others. Bugs or Issues If any problem is found, please report any bug or issue to Saposs Issues . We always appreciate your contributions. Thanks a lot :) Copyright and License \u00a9 Copyright 2019 by Saposs . All rights reserved.","title":"Welcome to Saposs"},{"location":"#welcome-to-saposs","text":"Saposs(abbr. `Simple As POSSible`) was given birth to make the software development better and easier. Saposs changes the way to build either software or application which all independent assembly components will be consolidated into.","title":"Welcome to Saposs"},{"location":"#saposs-products","text":"Saposs WF(for Windows Forms). Saposs Aquarium(for ASP.NET MVC).","title":"Saposs Products"},{"location":"#how-does-saposs-work","text":"Basically, the software or application is made from a set of various modules. That's why Saposs addressed into each software module. Saposs relied on a very simple concept which separates each software module into 3 parts: view, handler and service. View can be Forms, User Controls, etc... In the meantime, Handler is responsible for handling the business logics. And finally, Service represents as a set of utilities, helpers as well as function APIs. At the behind of the stage, Saposs will help you to connect between them indirectly.","title":"How does Saposs work?"},{"location":"#why-using-saposs","text":"Without Saposs, you have to create all software components that will depend on much more together. From day to day, its size will get bigger and difficult to maintain. Also, it costs much money for doing that. That's why Saposs was given birth to solve this problem. Our idea is to support for plugging in and -out all software components easily without affecting any others.","title":"Why using Saposs?"},{"location":"#bugs-or-issues","text":"If any problem is found, please report any bug or issue to Saposs Issues . We always appreciate your contributions. Thanks a lot :)","title":"Bugs or Issues"},{"location":"#copyright-and-license","text":"\u00a9 Copyright 2019 by Saposs . All rights reserved.","title":"Copyright and License"},{"location":"about/","text":"About This is the online documentation for Saposs, Saposs WF and Saposs Aquarium. Document Version 1.4.1 Latest updated on 12.05.2019.","title":"About Documentation"},{"location":"about/#about","text":"This is the online documentation for Saposs, Saposs WF and Saposs Aquarium. Document Version 1.4.1 Latest updated on 12.05.2019.","title":"About"},{"location":"connect-view-handler-service/","text":"Connect View-Handler-Service Saposs offers you a set of APIs to connect between view, handler and service together. The following is more details about them: API Function Return Value Description Utils.ExecuteView object(Form or User Control, etc...) Execute a view from a specific view name/id. Utils.ExecuteTemplateView cshtml or html, etc... Execute a template view from a specific view name/id. Utils.ExecuteMvcView cshtml or html, etc... Execute a MVC view from a specific route. Utils.ExecuteHandler N/A Execute a handler from a specific handler name/id. Utils.ExecuteMvcHandler N/A Execute a MVC handler from a specific route. Utils.ExecuteMvcMultipleHandlers N/A Execute multiple MVC handlers from a specific route. Utils.ExecuteService object Execute a service from a specific service name/id and its parameters(optional). Utils.ExecuteMvcService object Execute a service from a specific route and its parameters(optional). For instance: Connect to an existing view: // Your view name comes from Name property when implementing IView. var view = Utils . ExecuteView ( \"[YOUR_VIEW_NAME]\" ); Connect to an existing template view: // Your view name comes from Name property when implementing IView. var templateView = Utils . ExecuteTemplateView ( \"[YOUR_VIEW_NAME]\" ); Connect to an existing MVC view: // Your view route comes from Route property when implementing IWebMvcView. var mvcView = Utils . ExecuteMvcView ( \"[YOUR_ROUTE]\" ); Connect to an existing handler: // Your handler name comes from Name property when implementing IHandler. Utils . ExecuteHandler ( \"[YOUR_HANDLER_NAME]\" ); Connect to an existing MVC handler: // Your handler route comes from Route property when implementing IWebMvcHandler. Utils . ExecuteMvcHandler ( \"[YOUR_ROUTE]\" ); Connect to multiple existing MVC handlers: // Your handler route comes from Route property when implementing IWebMvcHandler. Utils . ExecuteMultipleMvcHandlers ( \"[YOUR_ROUTE]\" ); Connect to an existing service: // Your service name comes from Name property when implementing IService. var result = Utils . ExecuteService ( \"[YOUR_SERVICE_NAME]\" ); Connect to an existing MVC service: // Your service route comes from Route property when implementing IMvcervice. var result = Utils . ExecuteService ( \"[YOUR_ROUTE]\" ); NOTES Basically, Saposs Aquarium used route to locate Views, Handlers and Services automatically as well as connect between them together.","title":"Connect View-Handler-Service"},{"location":"connect-view-handler-service/#connect-view-handler-service","text":"Saposs offers you a set of APIs to connect between view, handler and service together. The following is more details about them: API Function Return Value Description Utils.ExecuteView object(Form or User Control, etc...) Execute a view from a specific view name/id. Utils.ExecuteTemplateView cshtml or html, etc... Execute a template view from a specific view name/id. Utils.ExecuteMvcView cshtml or html, etc... Execute a MVC view from a specific route. Utils.ExecuteHandler N/A Execute a handler from a specific handler name/id. Utils.ExecuteMvcHandler N/A Execute a MVC handler from a specific route. Utils.ExecuteMvcMultipleHandlers N/A Execute multiple MVC handlers from a specific route. Utils.ExecuteService object Execute a service from a specific service name/id and its parameters(optional). Utils.ExecuteMvcService object Execute a service from a specific route and its parameters(optional). For instance: Connect to an existing view: // Your view name comes from Name property when implementing IView. var view = Utils . ExecuteView ( \"[YOUR_VIEW_NAME]\" ); Connect to an existing template view: // Your view name comes from Name property when implementing IView. var templateView = Utils . ExecuteTemplateView ( \"[YOUR_VIEW_NAME]\" ); Connect to an existing MVC view: // Your view route comes from Route property when implementing IWebMvcView. var mvcView = Utils . ExecuteMvcView ( \"[YOUR_ROUTE]\" ); Connect to an existing handler: // Your handler name comes from Name property when implementing IHandler. Utils . ExecuteHandler ( \"[YOUR_HANDLER_NAME]\" ); Connect to an existing MVC handler: // Your handler route comes from Route property when implementing IWebMvcHandler. Utils . ExecuteMvcHandler ( \"[YOUR_ROUTE]\" ); Connect to multiple existing MVC handlers: // Your handler route comes from Route property when implementing IWebMvcHandler. Utils . ExecuteMultipleMvcHandlers ( \"[YOUR_ROUTE]\" ); Connect to an existing service: // Your service name comes from Name property when implementing IService. var result = Utils . ExecuteService ( \"[YOUR_SERVICE_NAME]\" ); Connect to an existing MVC service: // Your service route comes from Route property when implementing IMvcervice. var result = Utils . ExecuteService ( \"[YOUR_ROUTE]\" );","title":"Connect View-Handler-Service"},{"location":"connect-view-handler-service/#notes","text":"Basically, Saposs Aquarium used route to locate Views, Handlers and Services automatically as well as connect between them together.","title":"NOTES"},{"location":"create-a-handler/","text":"Create a new Handler First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new handler, you need to create a new class which implements IHandler. The following is sample code: For Saposs WF: [Export(typeof(IHandler))] public class Handler : IHandler { public string Name => \"YourApp.Handlers.NewHandler\" ; public string Title => \"New Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public void Execute () { // TODO: write code here... } } For Saposs Aquarium: [Export(typeof(IHandler))] public class Handler : IWebMvcHandler { public string Name => \"YourApp.Handlers.NewMvcHandler\" ; public string Title => \"New Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"default-handler\" public void Execute () { // TODO: write code here... } }","title":"Create a new Handler"},{"location":"create-a-handler/#create-a-new-handler","text":"First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new handler, you need to create a new class which implements IHandler. The following is sample code: For Saposs WF: [Export(typeof(IHandler))] public class Handler : IHandler { public string Name => \"YourApp.Handlers.NewHandler\" ; public string Title => \"New Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public void Execute () { // TODO: write code here... } } For Saposs Aquarium: [Export(typeof(IHandler))] public class Handler : IWebMvcHandler { public string Name => \"YourApp.Handlers.NewMvcHandler\" ; public string Title => \"New Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"default-handler\" public void Execute () { // TODO: write code here... } }","title":"Create a new Handler"},{"location":"create-a-service/","text":"Create a new Service First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new service, you need to create a new class which implements IService. The following is sample code: For Saposs WF: [Export(typeof(IService))] public class Service : IService { public string Name => \"YourApp.Services.NewService\" ; public string Title => \"New service\" ; public string Description => \"This is a new service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 3 ; public List < string > Dependencies => new List < string >(); public object Execute ( params object [] objs ) { return 1 ; } } For Saposs Aquarium: [Export(typeof(IService))] public class Service : IWebMvcService { public string Name => \"YourApp.Services.NewMvcService\" ; public string Title => \"New service\" ; public string Description => \"This is a new service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 3 ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"default-service\" ; public object Execute ( params object [] objs ) { return 1 ; } }","title":"Create a new Service"},{"location":"create-a-service/#create-a-new-service","text":"First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new service, you need to create a new class which implements IService. The following is sample code: For Saposs WF: [Export(typeof(IService))] public class Service : IService { public string Name => \"YourApp.Services.NewService\" ; public string Title => \"New service\" ; public string Description => \"This is a new service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 3 ; public List < string > Dependencies => new List < string >(); public object Execute ( params object [] objs ) { return 1 ; } } For Saposs Aquarium: [Export(typeof(IService))] public class Service : IWebMvcService { public string Name => \"YourApp.Services.NewMvcService\" ; public string Title => \"New service\" ; public string Description => \"This is a new service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 3 ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"default-service\" ; public object Execute ( params object [] objs ) { return 1 ; } }","title":"Create a new Service"},{"location":"create-a-view/","text":"Create a new View There are four kinds of following views in both Saposs WF and Aquarium: Root View. Administrator View. End-User View. Normal View. For Saposs Aquarium, there's still more one template view: Template View. First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new view, you need to create a new class which implements IView. Root View Root View is also called Start View. This view will be shown for the first time at the startup time. It is simple to create this view. The following is sample code: For Saposs WF: [Export(typeof(IView))] public class EntryView : IView { private EntryForm form = new EntryForm (); public bool IsDefault => false ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Entry View\" ; public string Description => \"This is a entry view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EntryView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class EntryView : IWebMvcView { public bool IsDefault => false ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Entry MVC View\" ; public string Description => \"This is a entry view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EntryView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"entry-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to true and IsDefault was set to false, this view will be called \"Entry View\". As above sample, we assume that \"EntryForm\" form was created in your view. Administrator View Administrator View will be shown, after end-users clicked on the button \"Go to Admin Page\". The following is sample code to create this view: For Saposs WF: [Export(typeof(IView))] public class AdminView : IView { private AdminForm form = new AdminForm (); public bool IsDefault => true ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Admin View\" ; public string Description => \"This is a admin view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.AdminView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class AdminView : IWebMvcView { public bool IsDefault => true ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Admin MVC View\" ; public string Description => \"This is a admin view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.AdminView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"admin-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to true and IsDefault was set to true, this view will be called \"Administrator View\". As above sample, we assume that \"AdminForm\" form was created in your view. End-User View End-User View will be shown, after end-users clicked on the button \"Go to Development Page\". The following is sample code to create this view: For Saposs WF: [Export(typeof(IView))] public class EndUserView : IView { private EndUserForm form = new EndUserForm (); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"End-User View\" ; public string Description => \"This is a end-user view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EndUserView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class EndUserView : IWebMvcView { public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Admin MVC End-User View\" ; public string Description => \"This is a end-user view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EndUserView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"enduser-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to false and IsDefault was set to true, this view will be called \"End-User View\". As above sample, we assume that \"EndUserForm\" form was created in your view. Normal View Normal View will be called using Saposs APIs. The following is sample code to create this view: For Saposs WF: [Export(typeof(IView))] public class NormalView : IView { private NormalForm form = new NormalForm (); public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Normal View\" ; public string Description => \"This is a normal view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.NormalView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class NormalView : IWebMvcView { public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Normal MVC View\" ; public string Description => \"This is a normal view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.NormalView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"normal-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to false and IsDefault was set to false, this view will be called \"Normal View\". As above sample, we assume that \"NormalForm\" form was created in your view. Template View Template View is similar to Normal View except only for web application. The following is sample code to create this view: [Export(typeof(IView))] public class TemplateView : IWebMvcView { public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . MasterWebPage ; public string Title => \"Template MVC View\" ; public string Description => \"This is a template view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.TemplateView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = string . Empty ; public string TemplateName { get ; set ; }; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } }","title":"Create a new View"},{"location":"create-a-view/#create-a-new-view","text":"There are four kinds of following views in both Saposs WF and Aquarium: Root View. Administrator View. End-User View. Normal View. For Saposs Aquarium, there's still more one template view: Template View. First of all, you need to unzip the downloaded view project template and open it in Visual Studio. In order to create a new view, you need to create a new class which implements IView.","title":"Create a new View"},{"location":"create-a-view/#root-view","text":"Root View is also called Start View. This view will be shown for the first time at the startup time. It is simple to create this view. The following is sample code: For Saposs WF: [Export(typeof(IView))] public class EntryView : IView { private EntryForm form = new EntryForm (); public bool IsDefault => false ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Entry View\" ; public string Description => \"This is a entry view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EntryView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class EntryView : IWebMvcView { public bool IsDefault => false ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Entry MVC View\" ; public string Description => \"This is a entry view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EntryView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"entry-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to true and IsDefault was set to false, this view will be called \"Entry View\". As above sample, we assume that \"EntryForm\" form was created in your view.","title":"Root View"},{"location":"create-a-view/#administrator-view","text":"Administrator View will be shown, after end-users clicked on the button \"Go to Admin Page\". The following is sample code to create this view: For Saposs WF: [Export(typeof(IView))] public class AdminView : IView { private AdminForm form = new AdminForm (); public bool IsDefault => true ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Admin View\" ; public string Description => \"This is a admin view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.AdminView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class AdminView : IWebMvcView { public bool IsDefault => true ; public bool IsAdmin => true ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Admin MVC View\" ; public string Description => \"This is a admin view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.AdminView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"admin-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to true and IsDefault was set to true, this view will be called \"Administrator View\". As above sample, we assume that \"AdminForm\" form was created in your view.","title":"Administrator View"},{"location":"create-a-view/#end-user-view","text":"End-User View will be shown, after end-users clicked on the button \"Go to Development Page\". The following is sample code to create this view: For Saposs WF: [Export(typeof(IView))] public class EndUserView : IView { private EndUserForm form = new EndUserForm (); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"End-User View\" ; public string Description => \"This is a end-user view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EndUserView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class EndUserView : IWebMvcView { public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Admin MVC End-User View\" ; public string Description => \"This is a end-user view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.EndUserView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"enduser-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to false and IsDefault was set to true, this view will be called \"End-User View\". As above sample, we assume that \"EndUserForm\" form was created in your view.","title":"End-User View"},{"location":"create-a-view/#normal-view","text":"Normal View will be called using Saposs APIs. The following is sample code to create this view: For Saposs WF: [Export(typeof(IView))] public class NormalView : IView { private NormalForm form = new NormalForm (); public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Normal View\" ; public string Description => \"This is a normal view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 2 , 23 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.NormalView\" ; public List < string > Dependencies => new List < string >(); public object Get () { return form ; } } For Saposs Aquarium: [Export(typeof(IView))] public class NormalView : IWebMvcView { public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WebPage ; public string Title => \"Normal MVC View\" ; public string Description => \"This is a normal view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.NormalView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"normal-view\" ; public string TemplateName { get ; set ; } = \"[YOUR_TEMPLATE_NAME]\" ; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } When IsAdmin was set to false and IsDefault was set to false, this view will be called \"Normal View\". As above sample, we assume that \"NormalForm\" form was created in your view.","title":"Normal View"},{"location":"create-a-view/#template-view","text":"Template View is similar to Normal View except only for web application. The following is sample code to create this view: [Export(typeof(IView))] public class TemplateView : IWebMvcView { public bool IsDefault => false ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . MasterWebPage ; public string Title => \"Template MVC View\" ; public string Description => \"This is a template view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => new List < object >(); public string Name => \"YourApp.Views.TemplateView\" ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = string . Empty ; public string TemplateName { get ; set ; }; public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } }","title":"Template View"},{"location":"hello-world-aquarium-tutorial/","text":"Hello World Aquarium Tutorial Prerequisites: Windows 7/8/10. .NET Framework 4.6.1 or higher. Visual Studio 2017 or higher. In this tutorial, we show you how to create a Hello World application based upon Saposs concepts and Saposs Aquarium. When user requests the home page, it will display \"Hello World\" text. At first, please download Saposs Aquarium and try to get it running on your local computer. Step 1: Create a simple view to display Hello World Create a new project named HelloWorldWFApp.Views.HelloWorldView using Visual Studio. Add these two references: Saposs.Framework and System.ComponentModel.Composition. You can find them in either project templates or Saposs Aquarium source. Add a new View.cshtml file and set it as embedded file. <html> <head> <title> Hello World Application </title> </head> <body> @Model.Text </body> </html> Create a new View class as follows: using Saposs.Framework ; using Saposs.Framework.Enums ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.IO ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; using System.Web ; namespace HelloWorldAquariumApp.Services.HelloWorldView { [Export(typeof(IView))] public class View : IWebMvcView { public List < object > Deps => new List < object >(); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WebPage ; public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World View\" ; public List < string > Dependencies => new List < string >(); public string Description => \"Represents as the Hello World view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 1 ; // set end-user to test in both dev and release mode. public string Route { get ; set ; } = \"end-user\" ; public string TemplateName { get ; set ; } public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } } Build this project. Step 2: Create a simple handler to change model Create a new project named HelloWorldAquariumApp.Handlers.HelloWorldHandler using Visual Studio. Create a new Handler class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; namespace HelloWorldAquariumApp.Handlers.HelloWorldHandler { [Export(typeof(IHandler))] public class Handler : IWebMvcHandler { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"/\" ; public void Execute () { var model = Utils . ExecuteMvcService < dynamic >( \"/\" ); model . Text = \"Hello World\" ; } } } Build this project. Step 3: Create a simple service to return text Create a new project named \"HelloWorldAquariumApp.Services.HelloWorldService\". Create a new Service class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; namespace HelloWorldAquariumApp.Services.HelloWorldService { [Export(typeof(IService))] public class Service : IWebMvcService { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Service\" ; public List < string > Dependencies => new List < string >(); public string Description => \"Represents as the Hello World service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 1 ; public string Route { get ; set ; } = \"/\" ; public dynamic Model = new System . Dynamic . ExpandoObject (); public object Execute ( params object [] objs ) { return Model ; } } } Build this project. Step 4: Deploy components to Saposs Aquarium Open Saposs Aquarium. Go to admin page. Choose the \"Upload Component\" tab. Upload the .dll view file from bin\\Debug or bin\\Release of HelloWorldAquariumApp.Views.HelloWorldView project. Upload the .dll handler file from bin\\Debug or bin\\Release of HelloWorldAquariumApp.Handlers.HelloWorldHandler project. Upload the .dll service file from bin\\Debug or bin\\Release of HelloWorldAquariumApp.Services.HelloWorldService project. Delete the default end-user view \"Saposs.Views.EndUserView\". Step 5: Test application Go to user page. The Hello World text will be shown. Step 6: Release application Go to \"Settings\" tab to press the \"Hide Admin\" page. Compress your portable source and then copy it to anywhere to execute. You can download the entire source code here . Additionally, we still would continue to upgrade Saposs Aquarium to make it better. If any problem, please create a new issue here . We always are looking forwarding to hear from you. Again, also thanks a lot for reading!","title":"Hello World Aquarium Tutorial"},{"location":"hello-world-aquarium-tutorial/#hello-world-aquarium-tutorial","text":"Prerequisites: Windows 7/8/10. .NET Framework 4.6.1 or higher. Visual Studio 2017 or higher. In this tutorial, we show you how to create a Hello World application based upon Saposs concepts and Saposs Aquarium. When user requests the home page, it will display \"Hello World\" text. At first, please download Saposs Aquarium and try to get it running on your local computer.","title":"Hello World Aquarium Tutorial"},{"location":"hello-world-aquarium-tutorial/#step-1-create-a-simple-view-to-display-hello-world","text":"Create a new project named HelloWorldWFApp.Views.HelloWorldView using Visual Studio. Add these two references: Saposs.Framework and System.ComponentModel.Composition. You can find them in either project templates or Saposs Aquarium source. Add a new View.cshtml file and set it as embedded file. <html> <head> <title> Hello World Application </title> </head> <body> @Model.Text </body> </html> Create a new View class as follows: using Saposs.Framework ; using Saposs.Framework.Enums ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.IO ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; using System.Web ; namespace HelloWorldAquariumApp.Services.HelloWorldView { [Export(typeof(IView))] public class View : IWebMvcView { public List < object > Deps => new List < object >(); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WebPage ; public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World View\" ; public List < string > Dependencies => new List < string >(); public string Description => \"Represents as the Hello World view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 1 ; // set end-user to test in both dev and release mode. public string Route { get ; set ; } = \"end-user\" ; public string TemplateName { get ; set ; } public object Get () { return Utils . ReadAssemblyResourceFile < View >(); } } } Build this project.","title":"Step 1: Create a simple view to display Hello World"},{"location":"hello-world-aquarium-tutorial/#step-2-create-a-simple-handler-to-change-model","text":"Create a new project named HelloWorldAquariumApp.Handlers.HelloWorldHandler using Visual Studio. Create a new Handler class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; namespace HelloWorldAquariumApp.Handlers.HelloWorldHandler { [Export(typeof(IHandler))] public class Handler : IWebMvcHandler { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 11 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public string Route { get ; set ; } = \"/\" ; public void Execute () { var model = Utils . ExecuteMvcService < dynamic >( \"/\" ); model . Text = \"Hello World\" ; } } } Build this project.","title":"Step 2: Create a simple handler to change model"},{"location":"hello-world-aquarium-tutorial/#step-3-create-a-simple-service-to-return-text","text":"Create a new project named \"HelloWorldAquariumApp.Services.HelloWorldService\". Create a new Service class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; namespace HelloWorldAquariumApp.Services.HelloWorldService { [Export(typeof(IService))] public class Service : IWebMvcService { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Service\" ; public List < string > Dependencies => new List < string >(); public string Description => \"Represents as the Hello World service.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 1 ; public string Route { get ; set ; } = \"/\" ; public dynamic Model = new System . Dynamic . ExpandoObject (); public object Execute ( params object [] objs ) { return Model ; } } } Build this project.","title":"Step 3: Create a simple service to return text"},{"location":"hello-world-aquarium-tutorial/#step-4-deploy-components-to-saposs-aquarium","text":"Open Saposs Aquarium. Go to admin page. Choose the \"Upload Component\" tab. Upload the .dll view file from bin\\Debug or bin\\Release of HelloWorldAquariumApp.Views.HelloWorldView project. Upload the .dll handler file from bin\\Debug or bin\\Release of HelloWorldAquariumApp.Handlers.HelloWorldHandler project. Upload the .dll service file from bin\\Debug or bin\\Release of HelloWorldAquariumApp.Services.HelloWorldService project. Delete the default end-user view \"Saposs.Views.EndUserView\".","title":"Step 4: Deploy components to Saposs Aquarium"},{"location":"hello-world-aquarium-tutorial/#step-5-test-application","text":"Go to user page. The Hello World text will be shown.","title":"Step 5: Test application"},{"location":"hello-world-aquarium-tutorial/#step-6-release-application","text":"Go to \"Settings\" tab to press the \"Hide Admin\" page. Compress your portable source and then copy it to anywhere to execute. You can download the entire source code here . Additionally, we still would continue to upgrade Saposs Aquarium to make it better. If any problem, please create a new issue here . We always are looking forwarding to hear from you. Again, also thanks a lot for reading!","title":"Step 6: Release application"},{"location":"hello-world-wf-tutorial/","text":"Hello World WF Tutorial Prerequisites: Windows 7/8/10. .NET Framework 4.6.1 or higher. Visual Studio 2017 or higher. In this tutorial, we show you how to create a Hello World application based upon Saposs concepts and Saposs WF. When user clicks on Greet button, this button content will be changed to \"Hello World\". At first, please download Saposs WF and try to get it running on your local computer. Step 1: Create a simple view containing the Greet button Create a new project named HelloWorldWFApp.Views.HelloWorldView using Visual Studio. Add these three references: Saposs.Framework, System.ComponentModel.Composition and System.Windows.Forms. You can find them in either project templates or Saposs WF. Add a new Form named ViewForm. Add a new Greet Button as follows: namespace HelloWorldWFApp.Views.HelloWorldView { partial class ViewForm { /// <summary> /// Required designer variable. /// </summary> private System . ComponentModel . IContainer components = null ; /// <summary> /// Clean up any resources being used. /// </summary> /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param> protected override void Dispose ( bool disposing ) { if ( disposing && ( components != null )) { components . Dispose (); } base . Dispose ( disposing ); } #region Windows Form Designer generated code /// <summary> /// Required method for Designer support - do not modify /// the contents of this method with the code editor. /// </summary> private void InitializeComponent () { this . btnGreet = new System . Windows . Forms . Button (); this . SuspendLayout (); // // btnGreet // this . btnGreet . Location = new System . Drawing . Point ( 172 , 71 ); this . btnGreet . Name = \"btnGreet\" ; this . btnGreet . Size = new System . Drawing . Size ( 75 , 23 ); this . btnGreet . TabIndex = 0 ; this . btnGreet . Text = \"Greet\" ; this . btnGreet . UseVisualStyleBackColor = true ; // // ViewForm // this . AutoScaleDimensions = new System . Drawing . SizeF ( 6F , 13F ); this . AutoScaleMode = System . Windows . Forms . AutoScaleMode . Font ; this . ClientSize = new System . Drawing . Size ( 433 , 161 ); this . Controls . Add ( this . btnGreet ); this . Name = \"ViewForm\" ; this . Text = \"Hello World\" ; this . ResumeLayout ( false ); } #endregion private System . Windows . Forms . Button btnGreet ; } } Open ViewForm.cs to add dependencies as follows: using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace HelloWorldWFApp.Views.HelloWorldView { public partial class ViewForm : Form { public ViewForm () { InitializeComponent (); DepControls . Add ( btnGreet ); } internal List < object > DepControls = new List < object >(); } } Create a new View class as follows: using Saposs.Framework ; using Saposs.Framework.Enums ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace HelloWorldWFApp.Views.HelloWorldView { [Export(typeof(IView))] public class View : IView { private ViewForm form = new ViewForm (); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Hello World View\" ; public string Description => \"This is a hello world view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => form . DepControls ; public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public List < string > Dependencies => form . DepControls != null ? form . DepControls . Select ( s => ( s as Control )?. Name ?? s . GetType (). Name ). ToList () : new List < string >(); public object Get () { Utils . ExecuteHandler ( \"HelloWorldWFApp.Handlers.HelloWorldHandler\" ); return form ; } } } Build this project. Create a new folder \"View\". Create a new folder \"Deps\" in this folder. Copy the DLL component and paste it to View folder. Choose the DLL component and Deps folder and then compress them. Step 2: Create a simple handler to raise the Greet button's event Create a new project named HelloWorldWFApp.Handlers.HelloWorldHandler using Visual Studio. Create a new Handler class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace HelloWorldWFApp.Handlers.HelloWorldHandler { [Export(typeof(IHandler))] public class Handler : IHandler { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public void Execute () { var view = Utils . GetView ( \"HelloWorldWFApp.Views.HelloWorldView\" ); if ( view ?. Deps . Count > 0 ) { var btn = ( view . Deps [ 0 ] as Button ); if ( btn != null ) { btn . Click += ( sender , args ) => { btn . Text = Utils . ExecuteService < string > ( \"HelloWorldApp.Services.HelloWorldService\" ); }; } } } } } Build this project. Create a new folder \"Handler\". Create a new folder \"Deps\" in this folder. Copy the DLL component and paste it to Handler folder. Choose the DLL component and Deps folder and then compress them. Step 3: Create a simple service to return text Create a new project named \"HelloWorldApp.Services.HelloWorldService\". Create a new Service class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; namespace HelloWorldWFApp.Services.HelloWorldService { [Export(typeof(IService))] public class Service : IService { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Service.\" ; public List < string > Dependencies => new List < string >(); public string Description => \"Represents as the service for returning the Hello World text.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 1 ; public object Execute ( params object [] objs ) { return \"Hello World\" ; } } } Build this project. Create a new folder \"Service\". Create a new folder \"Deps\" in this folder. Copy the DLL component and paste it to Service folder. Choose the DLL component and Deps folder and then compress them. Step 4: Deploy components to Saposs WF Open Saposs WF. Go to admin page. Choose the \"Upload Component\" tab. Upload the zipped view file. Upload the zipped handler file. Upload the zipped service file. Step 5: Test application Go to user page. Press the \"Greet\" button. The button's text will be changed to \"Hello World\". Step 6: Release application Go to \"Settings\" tab to press the \"Hide Admin\" page. Compress your portable source and then copy it to anywhere to execute. You can download the entire source code here . Additionally, we still would continue to upgrade Saposs WF to make it better. If any problem, please create a new issue here . We always are looking forwarding to hear from you. Again, also thanks a lot for reading!","title":"Hello World WF Tutorial"},{"location":"hello-world-wf-tutorial/#hello-world-wf-tutorial","text":"Prerequisites: Windows 7/8/10. .NET Framework 4.6.1 or higher. Visual Studio 2017 or higher. In this tutorial, we show you how to create a Hello World application based upon Saposs concepts and Saposs WF. When user clicks on Greet button, this button content will be changed to \"Hello World\". At first, please download Saposs WF and try to get it running on your local computer.","title":"Hello World WF Tutorial"},{"location":"hello-world-wf-tutorial/#step-1-create-a-simple-view-containing-the-greet-button","text":"Create a new project named HelloWorldWFApp.Views.HelloWorldView using Visual Studio. Add these three references: Saposs.Framework, System.ComponentModel.Composition and System.Windows.Forms. You can find them in either project templates or Saposs WF. Add a new Form named ViewForm. Add a new Greet Button as follows: namespace HelloWorldWFApp.Views.HelloWorldView { partial class ViewForm { /// <summary> /// Required designer variable. /// </summary> private System . ComponentModel . IContainer components = null ; /// <summary> /// Clean up any resources being used. /// </summary> /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param> protected override void Dispose ( bool disposing ) { if ( disposing && ( components != null )) { components . Dispose (); } base . Dispose ( disposing ); } #region Windows Form Designer generated code /// <summary> /// Required method for Designer support - do not modify /// the contents of this method with the code editor. /// </summary> private void InitializeComponent () { this . btnGreet = new System . Windows . Forms . Button (); this . SuspendLayout (); // // btnGreet // this . btnGreet . Location = new System . Drawing . Point ( 172 , 71 ); this . btnGreet . Name = \"btnGreet\" ; this . btnGreet . Size = new System . Drawing . Size ( 75 , 23 ); this . btnGreet . TabIndex = 0 ; this . btnGreet . Text = \"Greet\" ; this . btnGreet . UseVisualStyleBackColor = true ; // // ViewForm // this . AutoScaleDimensions = new System . Drawing . SizeF ( 6F , 13F ); this . AutoScaleMode = System . Windows . Forms . AutoScaleMode . Font ; this . ClientSize = new System . Drawing . Size ( 433 , 161 ); this . Controls . Add ( this . btnGreet ); this . Name = \"ViewForm\" ; this . Text = \"Hello World\" ; this . ResumeLayout ( false ); } #endregion private System . Windows . Forms . Button btnGreet ; } } Open ViewForm.cs to add dependencies as follows: using System ; using System.Collections.Generic ; using System.ComponentModel ; using System.Data ; using System.Drawing ; using System.Linq ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace HelloWorldWFApp.Views.HelloWorldView { public partial class ViewForm : Form { public ViewForm () { InitializeComponent (); DepControls . Add ( btnGreet ); } internal List < object > DepControls = new List < object >(); } } Create a new View class as follows: using Saposs.Framework ; using Saposs.Framework.Enums ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace HelloWorldWFApp.Views.HelloWorldView { [Export(typeof(IView))] public class View : IView { private ViewForm form = new ViewForm (); public bool IsDefault => true ; public bool IsAdmin => false ; public ViewTypes Type => ViewTypes . WForm ; public string Title => \"Hello World View\" ; public string Description => \"This is a hello world view.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < object > Deps => form . DepControls ; public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public List < string > Dependencies => form . DepControls != null ? form . DepControls . Select ( s => ( s as Control )?. Name ?? s . GetType (). Name ). ToList () : new List < string >(); public object Get () { Utils . ExecuteHandler ( \"HelloWorldWFApp.Handlers.HelloWorldHandler\" ); return form ; } } } Build this project. Create a new folder \"View\". Create a new folder \"Deps\" in this folder. Copy the DLL component and paste it to View folder. Choose the DLL component and Deps folder and then compress them.","title":"Step 1: Create a simple view containing the Greet button"},{"location":"hello-world-wf-tutorial/#step-2-create-a-simple-handler-to-raise-the-greet-buttons-event","text":"Create a new project named HelloWorldWFApp.Handlers.HelloWorldHandler using Visual Studio. Create a new Handler class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.ComponentModel.Composition ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; using System.Windows.Forms ; namespace HelloWorldWFApp.Handlers.HelloWorldHandler { [Export(typeof(IHandler))] public class Handler : IHandler { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Handler\" ; public string Description => \"...\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 2 ; public List < string > Dependencies => new List < string >(); public void Execute () { var view = Utils . GetView ( \"HelloWorldWFApp.Views.HelloWorldView\" ); if ( view ?. Deps . Count > 0 ) { var btn = ( view . Deps [ 0 ] as Button ); if ( btn != null ) { btn . Click += ( sender , args ) => { btn . Text = Utils . ExecuteService < string > ( \"HelloWorldApp.Services.HelloWorldService\" ); }; } } } } } Build this project. Create a new folder \"Handler\". Create a new folder \"Deps\" in this folder. Copy the DLL component and paste it to Handler folder. Choose the DLL component and Deps folder and then compress them.","title":"Step 2: Create a simple handler to raise the Greet button's event"},{"location":"hello-world-wf-tutorial/#step-3-create-a-simple-service-to-return-text","text":"Create a new project named \"HelloWorldApp.Services.HelloWorldService\". Create a new Service class as follows: using Saposs.Framework ; using System ; using System.Collections.Generic ; using System.Linq ; using System.Reflection ; using System.Text ; using System.Threading.Tasks ; namespace HelloWorldWFApp.Services.HelloWorldService { [Export(typeof(IService))] public class Service : IService { public string Name => Assembly . GetExecutingAssembly (). GetName (). Name ; public string Title => \"Hello World Service.\" ; public List < string > Dependencies => new List < string >(); public string Description => \"Represents as the service for returning the Hello World text.\" ; public string Version => \"Version 1.0.0\" ; public DateTime CreatedDate => new DateTime ( 2019 , 5 , 12 ); public DateTime ? UpdatedDate => null ; public bool IsEnabled => true ; public int Order => 1 ; public object Execute ( params object [] objs ) { return \"Hello World\" ; } } } Build this project. Create a new folder \"Service\". Create a new folder \"Deps\" in this folder. Copy the DLL component and paste it to Service folder. Choose the DLL component and Deps folder and then compress them.","title":"Step 3: Create a simple service to return text"},{"location":"hello-world-wf-tutorial/#step-4-deploy-components-to-saposs-wf","text":"Open Saposs WF. Go to admin page. Choose the \"Upload Component\" tab. Upload the zipped view file. Upload the zipped handler file. Upload the zipped service file.","title":"Step 4: Deploy components to Saposs WF"},{"location":"hello-world-wf-tutorial/#step-5-test-application","text":"Go to user page. Press the \"Greet\" button. The button's text will be changed to \"Hello World\".","title":"Step 5: Test application"},{"location":"hello-world-wf-tutorial/#step-6-release-application","text":"Go to \"Settings\" tab to press the \"Hide Admin\" page. Compress your portable source and then copy it to anywhere to execute. You can download the entire source code here . Additionally, we still would continue to upgrade Saposs WF to make it better. If any problem, please create a new issue here . We always are looking forwarding to hear from you. Again, also thanks a lot for reading!","title":"Step 6: Release application"},{"location":"intro-saposs-aquarium/","text":"Introduce Saposs Aquarium Saposs Aquarium is a web application which built on Saposs Framework and ASP.NET MVC. It assists you to build any web application which will get easier to maintain. Why using Saposs Aquarium? Saposs Aquarium offers you a simple UI to manage all components. Additionally, you're able to configure the settings. How does Saposs Aquarium work? Its concept is similar as Saposs WF. Install Saposs Aquarium In order to install Saposs Aquarium, please follow the following requirements: Make sure that your computer has installed .NET Framework 4.0 or higher. Download Saposs Aquarium from here . Unzip/unrar the downloaded source. Install IIS(via Programs and Features in Windows ) or IIS Express . Open IIS Manager. Create a new website by right-clicking on the Sites and then choose \"Add Website\". Point to the unzipped source. At the \"Host Name\" section, choose localhost by default. At the \"Port\" section, enter any port which you want. Ensure that that folder has IIS/ASP.NET Permission or you can set Application Pool Identity to LocalSystem or LocalService without requiring any permission. Completed. The result as screenshot: Congratulations, from now, you can get started to use Saposs Aquarium :)","title":"Introduce Saposs Aquarium"},{"location":"intro-saposs-aquarium/#introduce-saposs-aquarium","text":"Saposs Aquarium is a web application which built on Saposs Framework and ASP.NET MVC. It assists you to build any web application which will get easier to maintain.","title":"Introduce Saposs Aquarium"},{"location":"intro-saposs-aquarium/#why-using-saposs-aquarium","text":"Saposs Aquarium offers you a simple UI to manage all components. Additionally, you're able to configure the settings.","title":"Why using Saposs Aquarium?"},{"location":"intro-saposs-aquarium/#how-does-saposs-aquarium-work","text":"Its concept is similar as Saposs WF.","title":"How does Saposs Aquarium work?"},{"location":"intro-saposs-aquarium/#install-saposs-aquarium","text":"In order to install Saposs Aquarium, please follow the following requirements: Make sure that your computer has installed .NET Framework 4.0 or higher. Download Saposs Aquarium from here . Unzip/unrar the downloaded source. Install IIS(via Programs and Features in Windows ) or IIS Express . Open IIS Manager. Create a new website by right-clicking on the Sites and then choose \"Add Website\". Point to the unzipped source. At the \"Host Name\" section, choose localhost by default. At the \"Port\" section, enter any port which you want. Ensure that that folder has IIS/ASP.NET Permission or you can set Application Pool Identity to LocalSystem or LocalService without requiring any permission. Completed. The result as screenshot: Congratulations, from now, you can get started to use Saposs Aquarium :)","title":"Install Saposs Aquarium"},{"location":"intro-saposs-wf/","text":"Introduce Saposs WF Saposs WF is a Windows desktop application which was built on Saposs Framework. It assists you to build any desktop application which will become easier to maintain. Why using Saposs WF? Saposs WF provides you a simple UI to manage all components. Additionally, you're able to configure the settings. How does Saposs WF work? Saposs WF separated an application into 2 parts: administrator part and development part. For administrator part, this part is for any developer or programmer. There, you can manage all components and configure any setting. For development part, this part is for end-users. That means that they can see the result of your software. After everything is completed, you can hide the administrator part per UI so that the end-users are able to see the end result. Install Saposs WF In order to install Saposs WF, please follow the following requirements: Make sure that your computer has installed .NET Framework 4.0 or higher. Download Saposs WF from here . Unzip/unrar the downloaded source. Open the Saposs WF program by double-clicking on the executable file Saposs.Apps.WFApp . Completed. Congratulations, from now, you can get started to use Saposs WF :)","title":"Introduce Saposs WF"},{"location":"intro-saposs-wf/#introduce-saposs-wf","text":"Saposs WF is a Windows desktop application which was built on Saposs Framework. It assists you to build any desktop application which will become easier to maintain.","title":"Introduce Saposs WF"},{"location":"intro-saposs-wf/#why-using-saposs-wf","text":"Saposs WF provides you a simple UI to manage all components. Additionally, you're able to configure the settings.","title":"Why using Saposs WF?"},{"location":"intro-saposs-wf/#how-does-saposs-wf-work","text":"Saposs WF separated an application into 2 parts: administrator part and development part. For administrator part, this part is for any developer or programmer. There, you can manage all components and configure any setting. For development part, this part is for end-users. That means that they can see the result of your software. After everything is completed, you can hide the administrator part per UI so that the end-users are able to see the end result.","title":"How does Saposs WF work?"},{"location":"intro-saposs-wf/#install-saposs-wf","text":"In order to install Saposs WF, please follow the following requirements: Make sure that your computer has installed .NET Framework 4.0 or higher. Download Saposs WF from here . Unzip/unrar the downloaded source. Open the Saposs WF program by double-clicking on the executable file Saposs.Apps.WFApp . Completed. Congratulations, from now, you can get started to use Saposs WF :)","title":"Install Saposs WF"},{"location":"manage-live-projects/","text":"Manage Live Projects Starting from the new version 1.4.0 of Saposs WF, you're able to manage your live projects by signing in and then synchronizing your projects anywhere as long as your internet connection is available. Here's a new feature which helps any developer to be able to release any project anywhere easily. Currently, Saposs Aquarium isn't supported yet. In order to do that, please follow some following steps: Download and open Saposs WF v1.4.0. Press the button \"Go to admin page.\" Select the tab \"My Profile\". Press the button \"Sign In\". Enter your credential to sign in. The result is as follows: To synchronize your project into current Saposs WF instance, please choose a project in combobox at the previous screenshot. Then, continue to press \"Yes\". Completed.","title":"Manage Live Projects"},{"location":"manage-live-projects/#manage-live-projects","text":"Starting from the new version 1.4.0 of Saposs WF, you're able to manage your live projects by signing in and then synchronizing your projects anywhere as long as your internet connection is available. Here's a new feature which helps any developer to be able to release any project anywhere easily. Currently, Saposs Aquarium isn't supported yet. In order to do that, please follow some following steps: Download and open Saposs WF v1.4.0. Press the button \"Go to admin page.\" Select the tab \"My Profile\". Press the button \"Sign In\". Enter your credential to sign in. The result is as follows: To synchronize your project into current Saposs WF instance, please choose a project in combobox at the previous screenshot. Then, continue to press \"Yes\". Completed.","title":"Manage Live Projects"},{"location":"quick-tour/","text":"Quick Tour Both Saposs WF and Aquarium offers you three simple pages/forms to use: Start Page. Administrator Page. Default Page. Start Page Here you can navigate to the administrator page or default page as screenshot. For Saposs WF: For Saposs Aquarium: Administrator Page Here you're able to manage all software components and configure settings as screenshot. For Saposs WF: For Saposs Aquarium: Default Page Here is a default page which will be shown to end-users. You can update this page later. For Saposs WF: For Saposs Aquarium:","title":"Quick Tour"},{"location":"quick-tour/#quick-tour","text":"Both Saposs WF and Aquarium offers you three simple pages/forms to use: Start Page. Administrator Page. Default Page.","title":"Quick Tour"},{"location":"quick-tour/#start-page","text":"Here you can navigate to the administrator page or default page as screenshot. For Saposs WF: For Saposs Aquarium:","title":"Start Page"},{"location":"quick-tour/#administrator-page","text":"Here you're able to manage all software components and configure settings as screenshot. For Saposs WF: For Saposs Aquarium:","title":"Administrator Page"},{"location":"quick-tour/#default-page","text":"Here is a default page which will be shown to end-users. You can update this page later. For Saposs WF: For Saposs Aquarium:","title":"Default Page"},{"location":"sync-online-component/","text":"Syncronize Online Components Starting from the new version 1.4.0 of Saposs WF, you're able to synchronize publicly online components back to your local computer. Its main advantage is to reuse any public online component for your application. After that, anywhen you also can update it into Saposs WF as long as your internet connection is available. Currently, Saposs Aquarium isn't supported yet. In order to update it, please follow some following steps: Download and open Saposs WF v1.4.0. Press the button \"Go to admin page.\" Select the tab \"Online Components\". Choose any component in grid. Press the button \"Update\". Completed. For instance as screenshot:","title":"Synchronize Online Components"},{"location":"sync-online-component/#syncronize-online-components","text":"Starting from the new version 1.4.0 of Saposs WF, you're able to synchronize publicly online components back to your local computer. Its main advantage is to reuse any public online component for your application. After that, anywhen you also can update it into Saposs WF as long as your internet connection is available. Currently, Saposs Aquarium isn't supported yet. In order to update it, please follow some following steps: Download and open Saposs WF v1.4.0. Press the button \"Go to admin page.\" Select the tab \"Online Components\". Choose any component in grid. Press the button \"Update\". Completed. For instance as screenshot:","title":"Syncronize Online Components"},{"location":"upload-component-saposs-wf/","text":"Upload Component In case a component is unknown in the administrator page, you're able to upload your completed components steps by steps as follows: Make sure that your component is finished. Please zip your component. Open Saposs WF. Click the button \"Go to admin page\". Choose the tab \"Add new component\". Click the button \"Upload\". Choose the compressed component file. If everything is good, you will receive a message as screenshot. Otherwise, please try again. Additionally, by default, Saposs WF doesn't support for updating an existing component directly due to a couple of internal factors. Maybe it would be supported in the near future. In order to do that, at first, please delete an existing component which you would like to update. After that, Saposs WF will be restarted to reflect any changes. Finally, you follow steps by steps as above to upload the new version of your component again. In order to delete an existing component, please follow the following requirements: Make sure that your Saposs WF is running. Go to the tab \"Components\". Choose an existing component. Click the button \"Delete\" as screenshot. `` A dialog will be shown to warn you about deleting an existing component. Click the button \"yes\" to continue. Your Saposs WF will be restarted to proceed to delete it. Completed.","title":"Upload Component"},{"location":"upload-component-saposs-wf/#upload-component","text":"In case a component is unknown in the administrator page, you're able to upload your completed components steps by steps as follows: Make sure that your component is finished. Please zip your component. Open Saposs WF. Click the button \"Go to admin page\". Choose the tab \"Add new component\". Click the button \"Upload\". Choose the compressed component file. If everything is good, you will receive a message as screenshot. Otherwise, please try again. Additionally, by default, Saposs WF doesn't support for updating an existing component directly due to a couple of internal factors. Maybe it would be supported in the near future. In order to do that, at first, please delete an existing component which you would like to update. After that, Saposs WF will be restarted to reflect any changes. Finally, you follow steps by steps as above to upload the new version of your component again. In order to delete an existing component, please follow the following requirements: Make sure that your Saposs WF is running. Go to the tab \"Components\". Choose an existing component. Click the button \"Delete\" as screenshot. `` A dialog will be shown to warn you about deleting an existing component. Click the button \"yes\" to continue. Your Saposs WF will be restarted to proceed to delete it. Completed.","title":"Upload Component"},{"location":"what-is-saposs-component/","text":"What is Saposs component? As known, a software or application is made from a set of all modules. In Saposs, each module is made from components such as view, handlers and services. All Saposs components can be connected by using Saposs APIs indirectly. View: user control or forms, etc... Handler: business logics or code-behind. Service: a set of .NET APIs(e.g. helpers, utilities...). Applied Scope Up to now, Saposs Component will be applied for both Saposs WF and Aquarium. View In order to create a view, please follow the requirements steps by steps: Download the project template for view here . For Saposs Aquarium, please download here instead. Follow here to create a new view. Handler In order to create a handler, please follow the requirements steps by steps: Download the project template for handler here . For Saposs Aquarium, please download here instead. Follow here to create a new handler. Service In order to create a service, please follow the requirements steps by steps: Download the project template for service here . For Saposs Aquarium, please download here instead. Follow here to create a new service.","title":"What is Saposs Component?"},{"location":"what-is-saposs-component/#what-is-saposs-component","text":"As known, a software or application is made from a set of all modules. In Saposs, each module is made from components such as view, handlers and services. All Saposs components can be connected by using Saposs APIs indirectly. View: user control or forms, etc... Handler: business logics or code-behind. Service: a set of .NET APIs(e.g. helpers, utilities...).","title":"What is Saposs component?"},{"location":"what-is-saposs-component/#applied-scope","text":"Up to now, Saposs Component will be applied for both Saposs WF and Aquarium.","title":"Applied Scope"},{"location":"what-is-saposs-component/#view","text":"In order to create a view, please follow the requirements steps by steps: Download the project template for view here . For Saposs Aquarium, please download here instead. Follow here to create a new view.","title":"View"},{"location":"what-is-saposs-component/#handler","text":"In order to create a handler, please follow the requirements steps by steps: Download the project template for handler here . For Saposs Aquarium, please download here instead. Follow here to create a new handler.","title":"Handler"},{"location":"what-is-saposs-component/#service","text":"In order to create a service, please follow the requirements steps by steps: Download the project template for service here . For Saposs Aquarium, please download here instead. Follow here to create a new service.","title":"Service"}]}